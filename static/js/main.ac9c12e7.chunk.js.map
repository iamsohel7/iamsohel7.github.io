{"version":3,"sources":["useFetchJobs.js","Jobs.js","Search.js","Pagination.js","App.js","index.js"],"names":["ACTIONS","reducer","state","actions","type","loading","jobs","payload","error","hasNextPage","useFetchJobs","params","page","useReducer","dispatch","useEffect","cancelToken","axios","CancelToken","source","a","get","token","res","data","fetchPosts","cancel","Jobs","props","useState","open","setOpen","className","job","title","company","Date","created_at","toLocaleDateString","location","dangerouslySetInnerHTML","__html","how_to_apply","onClick","prevOpen","src","company_logo","alt","description","Search","onParamChange","onChange","value","name","full_time","Pagination","postsPerPage","totalPosts","paginate","pageNumbers","i","Math","ceil","push","map","number","App","setParams","setPage","darkMode","setDarkMode","indexOfLastPost","indexOfFirstPost","currentPost","slice","pageNumber","id","style","color","e","param","target","prevParams","length","items","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ac9c12e7.chunk.js","sourcesContent":["import {useEffect, useReducer} from 'react'\r\nimport axios from 'axios'\r\n\r\nconst API = 'https://jobs.github.com/positions.json'  \r\n\r\n//Object with the actions for the reducer function.\r\nconst ACTIONS = {\r\n    MAKE_REQUEST: 'make-request',\r\n    GET_DATA: 'get-data',\r\n    ERROR: 'error',\r\n    UPDATE_HAS_NEXT_PAGE: 'update-has-next-page'\r\n  }\r\n\r\n  \r\n\r\nfunction reducer(state, actions) {\r\n    switch(actions.type){\r\n        case ACTIONS.MAKE_REQUEST: \r\n            return {loading : true, jobs: []}\r\n\r\n        case ACTIONS.GET_DATA: \r\n            return { ...state, loading : false, jobs: actions.payload}    \r\n\r\n        case ACTIONS.ERROR: \r\n            return {loading: false,error: actions.payload, jobs: []}  \r\n        \r\n        case ACTIONS.UPDATE_HAS_NEXT_PAGE:\r\n          return { ...state, hasNextPage: actions.payload.hasNextPage }   \r\n\r\n        default: return state    \r\n               \r\n        }\r\n}\r\n\r\nfunction useFetchJobs(params, page) {\r\n\r\n    const [state, dispatch] = useReducer(reducer, { jobs:[], loading: false});\r\n\r\n    useEffect(() => {\r\n\r\n        const cancelToken = axios.CancelToken.source();  //to cancel the request when this component is not present.\r\n\r\n        dispatch({type:ACTIONS.MAKE_REQUEST,})  //dispatching to set the loading state while making the fetch \r\n                                                 //request.\r\n\r\n        const fetchPosts = async () => {\r\n          \r\n            const res = await axios.get(API,{\r\n                                            cancelToken: cancelToken.token,\r\n                                            params: { page: page, ...params }  \r\n                                        });\r\n            \r\n            dispatch({type: ACTIONS.GET_DATA, payload: res.data})  //dispatching to set the fetched data to current \r\n                                                                    //state.    \r\n        };\r\n    \r\n        fetchPosts();\r\n\r\n                        \r\n        return () => {\r\n            cancelToken.cancel()\r\n       }\r\n\r\n   }, [params, page])\r\n\r\n    return state  //Returning the current state\r\n}\r\n\r\nexport default useFetchJobs\r\n\r\n\r\n","import React, { useState } from 'react'\r\n\r\nfunction Jobs(props) {\r\n\r\n    const [ open, setOpen ] = useState(false); //state for the details-btn on a particular job data\r\n    \r\n    return (\r\n           <div className=\"job-card\">\r\n               <div>\r\n                    <p className=\"title\">{props.job.title} - <span>{props.job.company}</span></p>\r\n                        <span className=\"created-at\">{new Date(props.job.created_at).toLocaleDateString()}</span>\r\n                        <div className=\"type-location\">\r\n                            <span className=\"label\">{props.job.type}</span>\r\n                            <span className=\"label\">{props.job.location}</span>\r\n                        </div>\r\n                    \r\n                    <div dangerouslySetInnerHTML={{ __html: props.job.how_to_apply }}\r\n                    className=\"apply\"/>\r\n                    <button className=\"details-btn\" onClick={()=>setOpen(prevOpen=>!prevOpen)}>{open ? 'Hide Details' : 'View Details'}</button>\r\n               </div>\r\n               <img className=\"image\"  src={props.job.company_logo} alt={props.company}/>  \r\n               {\r\n                   open?  <div dangerouslySetInnerHTML={{ __html: props.job.description}}/> : ''\r\n               }\r\n             \r\n           </div>\r\n      \r\n    )\r\n}\r\n\r\nexport default Jobs\r\n","import React from 'react'\r\nimport './Search.css'\r\n\r\nfunction Search({params, onParamChange}) {\r\n    return (\r\n              <div className=\"forms\">\r\n                <form className=\"formElements\">\r\n\r\n                    <label>Description</label>\r\n                    <input type=\"text\" onChange={onParamChange} value={params.description} name=\"description\">\r\n                    </input>\r\n\r\n                    <label>Location</label>\r\n                    <input type=\"text\" onChange={onParamChange} value={params.location} name=\"location\">\r\n                     </input> \r\n\r\n                    <input type=\"checkbox\" onChange={onParamChange} value={params.full_time} name=\"full_time\"></input>\r\n                    <label>Only full time</label>     \r\n                       \r\n                </form>\r\n          \r\n          </div>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","import React from 'react';\r\nimport './Pagination.css';\r\n\r\nconst Pagination = ({ postsPerPage, totalPosts, paginate }) => {\r\n\r\n    const pageNumbers = [];  //Array to get the total number of pages required to show all the data\r\n\r\n     for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\r\n        pageNumbers.push(i);\r\n     }\r\n\r\n     return (\r\n                <div className=\"pages\">\r\n                      {pageNumbers.map(number =>(\r\n                          <button onClick={()=> paginate(number)} key={number} className=\"btn\">\r\n                              {number}\r\n                           </button>\r\n                        )\r\n                      )}\r\n                 </div>\r\n       );\r\n};\r\n\r\nexport default Pagination;","\nimport './App.css';\nimport { useState } from 'react'\nimport useFetchJobs from './useFetchJobs'   //Custom hook to fetch data\nimport Jobs from './Jobs'\nimport Search from './Search'\n\nimport Pagination from './Pagination';\n\nfunction App() {\n \n const [params, setParams] = useState({})\n const [page, setPage] = useState(1)\n const [postsPerPage] = useState(20);\n const {jobs, loading, error} = useFetchJobs(params, page);\n const [darkMode, setDarkMode] = useState(false);\n\n //function to get the user input of description and location field\n function handleParamChange(e) {\n  const param = e.target.name\n  const value = e.target.value\n  setPage(1)\n  setParams(prevParams => {\n    return { ...prevParams, [param]: value }\n  })\n}\n\n  //Setting the number of job posts that will be visible in a single page \n  const indexOfLastPost = page * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const currentPost = jobs.slice(indexOfFirstPost, indexOfLastPost);\n\n  const paginate = (pageNumber) => setPage(pageNumber);  //function to set the current page based on clicked page   \n                                                            //number\n\n  return (\n          <div id=\"container\" className={darkMode ? \"dark-mode\" : \"light-mode\"}>\n\n                  <h1>GitHub Jobs App</h1>\n                 <div className=\"container\">\n                    <span style={{ color: darkMode ? \"grey\" : \"yellow\" }}>☀︎</span>\n                    <div className=\"switch-checkbox\">\n                      <label className=\"switch\">\n                        <input type=\"checkbox\" onChange={() => setDarkMode(!darkMode)} />\n                        <span className=\"slider round\"> </span>\n                      </label>\n                    </div>\n                    <span style={{ color: darkMode ? \"#c96dfd\" : \"grey\" }}>☽</span>\n                 </div>\n     \n\n                  <Search params={params} onParamChange={handleParamChange}/> {/*Location & Description search component */}\n\n                  {/*Pagination component to show data on different page no.s*/}  \n                  <Pagination                      \n                      postsPerPage={postsPerPage}\n                      totalPosts={jobs.length}\n                      paginate={paginate}\n                    />\n\n                  {\n                    loading && <h1>Loading...</h1>  /*Loading text while fetching the data*/ \n                  }\n\n                  {\n                    error && <h3>{error.error}</h3>  /*if any error occurs while fetching*/\n                  }\n                \n                  {\n                    currentPost.map(items=>{      /*Mapping through the fetched data */        \n                      return <Jobs key={items.id} job={items}/>  /*Job component that displays the data fetched */\n                    })\n                  }    \n                \n                  <Pagination\n                    postsPerPage={postsPerPage}\n                    totalPosts={jobs.length}\n                    paginate={paginate}\n                  />\n          </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}